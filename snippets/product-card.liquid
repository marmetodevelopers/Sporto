{% comment %}
  @param product_card_product [Required]
    The product that this product item is for. If nil, then it will show an onboarding card.

  @param filter_context [Optional]
    If there are filters that the product cards are being displayed with, we want to pass in the context so we can display the correct variants.
    Valid options of collection or search.
{% endcomment %}

{% liquid
  assign onboarding = false
  if product_card_product == nil
    assign onboarding = true
  endif

  assign product_link = product_card_product.url | within: collection

  assign crop_focus = false
  if settings.product_card_crop_mode == 'fill' and settings.product_card_media_ratio != 'natural'
    assign crop_focus = 'center'
  endif

  assign fill_mode = 'fill'
  if settings.product_card_crop_mode == 'fit' and settings.product_card_media_ratio != 'natural'
    assign fill_mode = 'fit'
  endif
%}

{% comment %} If filters exist, we want to make sure the product item shows the current color filter variant.
We store the current color options in the filter {% endcomment %}
{% assign filter_colors = blank %}
{% if filter_context != blank %}
  {%- for filter in filter_context.filters -%}
    {%- if filter.param_name == 'filter.v.option.color' -%}
      {% assign filter_colors = '|' %}
      {%- for value in filter.values -%}
        {%- if value.active -%}
          {% assign filter_colors = filter_colors | append: value.value | downcase | append: '|' %}
          <span class="hidden">{{ filter_colors }}</span>
        {%- endif -%}
      {%- endfor -%}
    {%- endif -%}
  {%- endfor -%}
{% endif %}

{% comment %} Find which option is set up for Color (if it exists) so we can be set up for swatches, variant images,
and the color label on the title {% endcomment %}
{% liquid
  assign color_option_key = blank
  if product_card_product.options_by_name['Color'] != blank
    assign color_option_key = 'option' | append: product_card_product.options_by_name['Color'].position
  endif
%}

{% comment %}
The following builds out several variables that are used within this and other sub-components:
  - selected_variant_image which is the image to show on the product card when first loaded
  - color_array which contains the names of all of the color variants for this product
  - variant_indices_array which contains an the indices of the variants which are in the color_array
  - variant_images_html which is the html that contains the images for all variants
{% endcomment %}

{% assign color_variants_added = '|' %}
{% assign selected_variant_image = blank %}
{% assign variant_images_html = '' %}
{% assign variant_indices_string = '' %}
{% assign filter_index = blank %}
{% assign selected_color_name = blank %}

{% for next_variant in product_card_product.variants %}
  {% assign search_string = '|' | append: next_variant[color_option_key] | downcase | append: '|' %}
  {% unless color_variants_added contains search_string %}
    {% if filter_colors contains search_string %}
      {% assign filter_position = filter_colors | split: search_string | first %}
      {% if filter_index == blank or filter_position.size < filter_index %}
        {% assign selected_variant_image = next_variant.featured_media.preview_image %}
        {% assign selected_color_name = next_variant[color_option_key] | downcase %}
        {% assign filter_index = filter_position.size %}
      {% endif %}
    {% elsif selected_variant_image == blank and selected_color_name == next_variant[color_option_key] %}
      {% assign selected_variant_image = next_variant.featured_media.preview_image %}
    {% elsif selected_color_name == blank %}
      {% assign selected_color_name = next_variant[color_option_key] | downcase %}
      {% assign selected_variant_image = next_variant.featured_media.preview_image %}
    {% endif %}

    {% if next_variant.featured_media != blank %}
      {% capture variant_image_part %}
        <div
          class="product-card__image-variant hidden"
          data-variant-image="{{ next_variant[color_option_key] | downcase }}"
        >
          {% comment %}Component lazy-img:default begin{% endcomment %}
          {% render 'lazy-img', img: next_variant.featured_media.preview_image, size: '700x', lazy: true, canvas: true, crop_focus: crop_focus, fill_mode: fill_mode %}
          {% comment %}Component lazy-img:default end{% endcomment %}
        </div>
      {% endcapture %}
      {% assign variant_images_html = variant_images_html | append: variant_image_part %}
    {% endif %}
    {% assign color_variants_added = color_variants_added | append: next_variant[color_option_key] | downcase | append: '|' %}
    {% assign variant_indices_string = variant_indices_string | append: '|' | append: forloop.index0 %}
  {% endunless %}
{% endfor %}

{% assign color_array = color_variants_added | remove_first: '|' | split: '|' %}
{% assign variant_indices_array = variant_indices_string | remove_first: '|' | split: '|' %}

<div
  data-component="product-card"
  data-component-type="component"
  {% if tag != blank %}data-component-tag="{{ tag }}"
  {% endif %}class="
    product-card
    {% if onboarding %}
      product-card--onboarding
    {% endif %}
  "
>
  <script
    type="application/json"
    data-component-data
  >
    {
      "settings": {
        "show_second_image": {{ settings.product_card_show_second_image | json }}
      }
    }
  </script>

  <div class="product-card__clickable-area">
    <h3 class="product-card__title">
      <a class="product-card__link" href="{{ product_link }}" aria-label="{{ product_card_product.title }}">
        {{ product_card_product.title }}
        {% if settings.product_card_color_option_name == 'beside' and selected_color_name != blank %}
          <span class="product-card__title-variant">
            {{ 'products.product_cards.in' | t }}
            <span class="product-card__title-variant-name" data-variant-color-label>
              {{ selected_color_name }}
            </span>
          </span>
        {% endif %}
      </a>
    </h3>

    <div
      class="
        product-card__image
        product-card__image--{{ settings.product_card_media_ratio }}
      "
      data-product-image
    >
      {% if selected_variant_image != blank %}
        {% comment %} Show the first color variant if an image exists {% endcomment %}
        {% comment %}Component lazy-img:default begin{% endcomment %}
        {% render 'lazy-img', img: selected_variant_image, size: '700x', lazy: true, canvas: true, crop_focus: crop_focus, fill_mode: fill_mode %}
        {% comment %}Component lazy-img:default end{% endcomment %}
      {% elsif product_card_product.featured_media.preview_image %}
        {% comment %} If there are no color variants {% endcomment %}
        {% comment %}Component lazy-img:default begin{% endcomment %}
        {% render 'lazy-img', img: product_card_product.featured_media.preview_image, size: '700x', lazy: true, canvas: true, crop_focus: crop_focus, fill_mode: fill_mode %}
        {% comment %}Component lazy-img:default end{% endcomment %}
      {% else %}
        {%- capture index -%}
          {%- cycle '1', '2', '3', '4', '5', '6' -%}
        {%- endcapture -%}
        {{ 'product-' | append: index | placeholder_svg_tag: 'placeholder-svg' }}
      {% endif %}

      {% comment %} Loop through all the variants to include the first variant image of each color {% endcomment %}
      {% if color_option_key != blank %}
        <div
          class="product-card__image-variants hidden"
          data-variant-images
        >
          {{ variant_images_html }}
        </div>
      {% endif %}

      {% comment %} Add a secondary image to display when hovering over the product image {% endcomment %}
      {% if settings.product_card_show_second_image and product_card_product.media.size > 1 %}
        <div class="product-card__image-secondary">
          {% comment %}Component lazy-img:default begin{% endcomment %}
          {% render 'lazy-img', img: product_card_product.media[1].preview_image, size: '700x', lazy: true, canvas: true, crop_focus: crop_focus, fill_mode: fill_mode %}
          {% comment %}Component lazy-img:default end{% endcomment %}
        </div>
      {% endif %}

      <a
        class="product-card__image-link"
        href="{{ product_link }}"
        tabindex="-1"
        aria-hidden="true"
      ></a>

      {% if product_card_product %}
        {% assign show_sale_badge = false %}
        {% if settings.product_card_badges == 'sale' or settings.product_card_badges == 'sale-custom' or settings.product_card_badges == 'custom-preferred' %}
          {% assign show_sale_badge = true %}
        {% endif %}
        {% assign show_custom_badge = false %}
        {% if settings.product_card_badges == 'custom' or settings.product_card_badges == 'sale-custom' or settings.product_card_badges == 'custom-preferred' %}
          {% assign show_custom_badge = true %}
        {% endif %}


        {% if show_sale_badge or show_custom_badge %}
          {% assign custom_preferred = false %}
          {% if settings.product_card_badges == 'custom-preferred' %}
            {% assign custom_preferred = true %}
          {% endif %}
          <div class="product-card__badges">
            {% comment %}Component product-badges:default begin{% endcomment %}
            {% liquid
              assign badge_product_01d6c0b9 = badge_product
              assign badge_product = product_card_product
            %}
            {% comment %}
              @param badge_product {Product} [Required]
                The product that these badges are for
            
              @param show_sale_badge {Boolean} [Optional]
                If true, will show a sale badge if the product is on sale
            
              @param show_custom_badge {Boolean} [Optional]
                If true, will show the first custom badge name that matches to a tag
            
              @param custom_preferred {Boolean} [Optional]
                If true, will only show a custom badge, even if a sale badge is available. Will show sale badge if no custom badge is available.
            {% endcomment %}
            
            {% assign custom_preferred = custom_preferred | default: false %}
            
            {% assign custom_tag_label = blank %}
            {% assign custom_tag_color = blank %}
            {% assign custom_tag_background = blank %}
            {% if show_custom_badge %}
              {% for i in (1..4) %}
                {% assign tag_id = 'product_badge_tag_' | append: i %}
                {% assign tag_label = settings[tag_id] %}
                {% for tag in badge_product.tags %}
                  {% if tag_label == tag %}
                    {% assign tag_text_id = 'product_badge_text_color_' | append: i %}
                    {% assign custom_tag_color = settings[tag_text_id] %}
                    {% assign tag_background_id = 'product_badge_background_color_' | append: i %}
                    {% assign custom_tag_background = settings[tag_background_id] %}
                    {% assign custom_tag_label = tag %}
                    {% break %}
                  {% endif %}
                {% endfor %}
                {% if custom_tag_label != blank %}
                  {% break %}
                {% endif %}
              {% endfor %}
            {% endif %}
            
            <div
              data-component="product-badges"
              data-component-type="component"
              {% if tag != blank %}data-component-tag="{{ tag }}"
              {% endif %}class="
                product-badges
                product-badges--font-{{ settings.product_badges_font }}
                {% if settings.product_badges_uppercase %}product-badges--uppercase{% endif %}
                {% if settings.product_badges_bold %}product-badges--bold{% endif %}
              "
            >
              {% if badge_product.available %}
                {% if show_sale_badge and badge_product.price < badge_product.compare_at_price %}
                  {% if custom_preferred == false or custom_tag_label == blank %}
                    <div class="product-badges__badge product-badges__badge--sale">{{ 'products.on_sale' | t }}</div>
                  {% endif %}
                {% endif %}
            
                {% if show_custom_badge and custom_tag_label != blank %}
                  <div
                    class="product-badges__badge"
                    style="
                      --color-product-tag-text: {{ custom_tag_color }};
                      --color-product-tag-background: {{ custom_tag_background }};
                    "
                  >
                    {{ custom_tag_label }}
                  </div>
                {% endif %}
              {% else %}
                <div class="product-badges__badge product-badges__badge--sold-out">{{ 'products.sold_out' | t }}</div>
              {% endif %}
            </div>
            
            {% liquid
              assign badge_product = badge_product_01d6c0b9
              assign badge_product_01d6c0b9 = nil
            %}
            {% comment %}Component product-badges:default end{% endcomment %}
          </div>
        {% endif %}
      {% endif %}

      {% if settings.product_card_enable_quick_add %}
        <div class="product-card__button-container">
          <button
            class="product-card__quick-add-button"
            data-quick-add-button
            data-product-link="{{ product_link }}"
          >
            <span class="product-card__quick-add-text">{{ 'products.product_cards.quick_add' | t }}</span>
          </button>

          {% capture quick_add_icon %}
            {% comment %}Icon bag-small:default begin{% endcomment %}
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M6.225 4.004a1.775 1.775 0 0 1 3.55 0v.771h-3.55v-.771Zm-1.25.771v-.771a3.025 3.025 0 1 1 6.05 0v.771H13.7c.787 0 1.425.638 1.425 1.425v8.5c0 .787-.638 1.425-1.425 1.425H2.3A1.425 1.425 0 0 1 .875 14.7V6.2c0-.787.638-1.425 1.425-1.425h2.675ZM2.125 6.2c0-.097.078-.175.175-.175h11.4c.097 0 .175.078.175.175v8.5a.175.175 0 0 1-.175.175H2.3a.175.175 0 0 1-.175-.175V6.2Z" fill="currentColor"/></svg>
            {% comment %}Icon bag-small:default end{% endcomment %}
          {% endcapture %}
          {% assign quick_add_text = 'products.product_cards.quick_add' | t %}

          {% comment %}Component button-floating:default begin{% endcomment %}
          {% liquid
            assign style_c31c5e22 = style
            assign style = 'default'
            assign size_c31c5e22 = size
            assign size = 'small'
            assign icon_c31c5e22 = icon
            assign icon = 'bag-small'
            assign label_c31c5e22 = label
            assign label = quick_add_text
          %}
          {% comment %}
            @param style [Required]
              This is the style of the button: default, or quiet. Default default.
          
            @param size [Required]
              This defines the size of the button: small, medium, or large. Default medium.
          
            @param icon [Required]
              This is the icon to be included in the button.
          
            @param label [Required]
              The label for the button, which will be read out to a screen reader
          
            @param attributes [Optional]
              This will include any additional attributes that the button needs. For example, aria-controls.
          {% endcomment %}
          
          <button
            data-component="button-floating"
            data-component-type="component"
            {% if tag != blank %}data-component-tag="{{ tag }}"
            {% endif %}class="button-floating button-floating--{{ style }} button-floating--{{ size }} button-floating--{{ icon }}"
            {{ attributes }}
          >
            <span class="visually-hidden">{{ label }}</span>
          </button>
          
          {% liquid
            assign style = style_c31c5e22
            assign style_c31c5e22 = nil
            assign size = size_c31c5e22
            assign size_c31c5e22 = nil
            assign icon = icon_c31c5e22
            assign icon_c31c5e22 = nil
            assign label = label_c31c5e22
            assign label_c31c5e22 = nil
          %}
          {% comment %}Component button-floating:default end{% endcomment %}
        </div>
      {% endif %}
    </div>

    {%- if settings.product_card_show_vendor -%}
      <div class="product-card__vendor">
        <span class="visually-hidden">{{ 'products.vendor' | t }}</span>
        <div class="product-card__vendor_name">{{ product_card_product.vendor }}</div>
      </div>
    {%- endif -%}

    {% if settings.product_card_color_option_name == 'below' and selected_color_name != blank %}
      <div class="product-card__color" data-variant-color-label>
        {{ selected_color_name }}
      </div>
    {% endif %}

    <div class="product-card__price">
      {% comment %}Component price:default begin{% endcomment %}
      {% render 'price', product: product_card_product %}
      {% comment %}Component price:default end{% endcomment %}
    </div>
  </div>

  {% if color_option_key != blank %}
    {% if settings.product_card_color_option == 'swatches' %}
      <div class="product-card__swatches">
        {% comment %}Component product-card-swatches:default begin{% endcomment %}
        {% liquid
          assign swatch_product_10615d0c = swatch_product
          assign swatch_product = product_card_product
          assign use_variant_images_10615d0c = use_variant_images
          assign use_variant_images = false
          assign selected_color_10615d0c = selected_color
          assign selected_color = selected_color_name
        %}
        {% comment %}
          @param swatch_product {Product} [Required]
            The product to draw the swatches for.
        
          @param color_array {Array} [Required]
            An array of colors that need to be shown as swatches
        
          @param use_variant_images {Boolean} [Optional]
            If true, will try and use a variant image instead of a swatch color, if one exists.
        
          @param variant_indices_array {Array} [Optional]
            An array of variant indices that maps directly to the color array. This is useful for grabbing the direct variant.
        
          @param selected_color {String} [Optional]
            The color that should be selected on load.
        {% endcomment %}
        
        {% assign use_variant_images = use_variant_images | default: false %}
        
        <div data-component="product-card-swatches" data-component-type="component" {% if tag != blank %}data-component-tag="{{ tag }}" {% endif %}class="product-card-swatches">
          <div class="product-card-swatches__wrapper">
            {% for next_color in color_array %}
              {% assign variant_image = blank %}
              {% if variant_indices_array %}
                {% assign variant_index = variant_indices_array[forloop.index0] | plus: 0 %}
                {% capture variant_index_attr %}
                  data-variant-index="{{ variant_index }}"
                {% endcapture %}
              {% endif %}
        
              <button
                class="product-card-swatches__swatch-button"
                data-swatch-button
                aria-label="{{ next_color }}"
                data-color="{{ next_color | downcase }}"
                {{ variant_index_attr }}
                data-selected="{%- if selected_color == next_color -%}selected{%- endif -%}"
              >
                {% if use_variant_images %}
                  {% assign variant_index = variant_indices_array[forloop.index0] | plus: 0 %}
                  {% assign variant_image = swatch_product.variants[variant_index].featured_media.preview_image %}
                {% endif %}
        
                {% comment %}Component swatch:default begin{% endcomment %}
                {% liquid
                  assign color_name_25d4ccfa = color_name
                  assign color_name = next_color
                  assign show_tooltip_25d4ccfa = show_tooltip
                  assign show_tooltip = false
                %}
                {% comment %}
                  @param color_name {String} [Required]
                    Color name for which to find a suitable background
                
                  @param variant_image {Boolean} [Optional]
                    Will display a this variant image, instead of a swatch color.
                
                  @param show_tooltip {Booleal} [Optional]
                    If true, will show tooltip on hover of the swatch.
                {% endcomment %}
                
                {%- assign variant_image = variant_image | default: blank -%}
                
                {%- assign swatch_color = blank -%}
                {%- assign swatch_image = blank -%}
                {%- assign custom_colors = settings.swatches_custom_colors -%}
                
                {% comment %} First look for a defined custom color {% endcomment %}
                {%- assign custom_colors = custom_colors | newline_to_br | strip_newlines | split: '<br />' -%}
                {%- assign swatch_search_color = color_name | downcase -%}
                {%- for custom_entry in custom_colors -%}
                  {%- assign custom_color = custom_entry | split: ':' -%}
                  {%- assign custom_color_name = custom_color[0] | strip | downcase -%}
                  {%- assign custom_color_value = custom_color[1] | strip -%}
                  {%- if swatch_search_color == custom_color_name -%}
                    {% assign swatch_color = custom_color_value %}
                    {%- break -%}
                  {%- endif -%}
                {%- endfor -%}
                
                {% comment %} Otherwise default to the raw color name, which will either be a
                valid named HTML color and displayed as such, or will be ignored by the browser. {% endcomment %}
                {%- if swatch_color == blank -%}
                  {% assign swatch_color = color_name | replace: " ", "" | handleize %}
                {%- endif -%}
                
                {% comment %} Use a variant image for the swatch if one exists. {% endcomment %}
                {%- if variant_image != blank -%}
                  {% assign swatch_image = variant_image %}
                {%- else -%}
                  {% comment %} If not using variant images, look for a image that matches the color name in the theme's files. {% endcomment %}
                  {% assign swatch_file_name = color_name | downcase | handleize | append: '.png' %}
                  {%- if images[swatch_file_name] != blank -%}
                    {%- assign swatch_image = images[swatch_file_name] -%}
                  {%- endif -%}
                {%- endif -%}
                
                <div
                  data-component="swatch"
                  data-component-type="component"
                  {% if tag != blank %}data-component-tag="{{ tag }}"
                  {% endif %}class="swatch"
                  {% if swatch_image == blank %}
                    style="--swatch-color: {{ swatch_color }};"
                  {% endif %}
                >
                  <span class="swatch__label {% unless show_tooltip %}visually-hidden{% endunless %}">{{ color_name }}</span>
                  <div
                    class="
                      swatch__fill
                      swatch__fill--{{ settings.swatch_shape }}
                    "
                  >
                    {% if swatch_image != blank %}
                      {% comment %}Component lazy-img:default begin{% endcomment %}
                      {% render 'lazy-img', img: swatch_image, size: '50x', crop_focus: 'center', lazy: true, canvas: true %}
                      {% comment %}Component lazy-img:default end{% endcomment %}
                    {% endif %}
                  </div>
                </div>
                
                {% liquid
                  assign color_name = color_name_25d4ccfa
                  assign color_name_25d4ccfa = nil
                  assign show_tooltip = show_tooltip_25d4ccfa
                  assign show_tooltip_25d4ccfa = nil
                %}
                {% comment %}Component swatch:default end{% endcomment %}
              </button>
            {% endfor %}
          </div>
          <button class="product-card-swatches__show-more hidden" data-swatches-show-more>
            {{ 'products.swatches.show_more' | t: count: 'count' }}
          </button>
        </div>
        
        {% liquid
          assign swatch_product = swatch_product_10615d0c
          assign swatch_product_10615d0c = nil
          assign use_variant_images = use_variant_images_10615d0c
          assign use_variant_images_10615d0c = nil
          assign selected_color = selected_color_10615d0c
          assign selected_color_10615d0c = nil
        %}
        {% comment %}Component product-card-swatches:default end{% endcomment %}
      </div>
    {% elsif settings.product_card_color_option == 'count' %}
      <div class="product-card__colors-available">
        {{ 'products.product_cards.colors_available' | t: count: color_array.size }}
      </div>
    {% endif %}
  {% endif %}

  {% comment %} Product Labels {% endcomment %}
  {% assign label_metafield = settings.product_card_label_metafield | split: '.' %}
  {% assign icon_metafield = settings.product_card_icon_metafield | split: '.' %}
  {% if product_card_product.metafields[label_metafield[0]][label_metafield[1]] != blank or product_card_product.metafields[icon_metafield[0]][icon_metafield[1]] != blank %}
    <div class="product-card__label product-card__label--{{ settings.product_card_label_style }}">
      {% if product_card_product.metafields[icon_metafield[0]][icon_metafield[1]] != blank %}
        <div class="product-card__label-icon">
          {% comment %}Component lazy-img:default begin{% endcomment %}
          {% render 'lazy-img', img: product_card_product.metafields[icon_metafield[0]][icon_metafield[1]], size: '20x' %}
          {% comment %}Component lazy-img:default end{% endcomment %}
        </div>
      {% endif %}
      {% if product_card_product.metafields[label_metafield[0]][label_metafield[1]] != blank %}
        {{ product_card_product.metafields[label_metafield[0]][label_metafield[1]] }}
      {% endif %}
    </div>
  {% endif %}
</div>